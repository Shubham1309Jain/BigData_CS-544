import os
from typing import Optional
from .docker_target_wrapper import DockerTargetWrapper


class DockerBuildTargetWrapper(DockerTargetWrapper):
    """
    Use when needing to build a Docker image.
    Abstracts away the target directory of the grader.
    Note when using with subprocess.run():
        - Don't use shell=True
        - Don't use text=True
    """

    _instance: Optional["DockerBuildTargetWrapper"] = None
    # target directory. Should only be used when storing a grading key in the project's root dir
    target: str
    command_args: dict

    @classmethod
    def seed_target(cls, target: str):
        cls.__new__(cls, command_args=None, target=target)

    def __new__(cls, target: str | None = None, **command_args):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
            cls._instance.target = target if target is not None else "."
        if command_args is not None:
            cls._instance.command_args = command_args
        return cls._instance

    def __str__(self) -> str:
        command = f"docker build {self.target}"
        for flag, value in self.command_args.items():
            if flag == "f":
                command += f" -{flag} {os.path.join(self.target, value)}"
            else:
                flag_char = "-" if len(flag) == 1 else "--"
                command += f" {flag_char}{flag} {value}"
        return command.strip()
