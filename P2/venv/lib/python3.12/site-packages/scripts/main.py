import traceback
from argparse import ArgumentParser

from lib.autobadger import Autobadger, Callback
from lib.enums import Project, Registry, StdOut
from lib.io import IOTargetWrapper, DockerBuildTargetWrapper, DockerComposeTargetWrapper
from lib.output import AutobadgerOutput
from lib.registry import get_registry, RegisteredTestClass
import scripts


def _parse_args_():
    parser = ArgumentParser()
    parser.add_argument("--project", type=Project)
    parser.add_argument("--info", action="store_true")
    parser.add_argument("--stdout", type=StdOut, default=StdOut.PRINT)
    parser.add_argument("--request_id", type=str, default=None)
    parser.add_argument("--verbose", action="store_true")
    parser.add_argument(
        "--target",
        type=str,
        default="./",
        help="Target directory to point to grade. Useful for constructing tests "
        "and run them locally against a target project.",
    )
    return parser.parse_args()


def print_cli_info_and_usage():
    version = scripts.__version__
    print("Welcome to Autobadger!")
    print(f"Current Version: {version}")
    print(
        "Usage: autobadger [--project PROJECT (p1-p8)] [--stdout STDOUT (print|json)] [--verbose]"
    )


def main():
    args = _parse_args_()
    project = args.project
    request_id = args.request_id
    target = args.target
    verbose = args.verbose
    IOTargetWrapper.seed_target(target=target)
    DockerBuildTargetWrapper.seed_target(target=target)
    DockerComposeTargetWrapper.seed_target(target=target)
    info = args.info
    if not info and not project:
        raise ValueError('Project not specified. Pass --project="..." to CLI.')
    if info:
        print_cli_info_and_usage()
        return
    tests: list[RegisteredTestClass] = get_registry(project, registry=Registry.TEST)
    callbacks: list[Callback] = get_registry(project, registry=Registry.CALLBACK)
    try:
        autobadger = Autobadger(
            project,
            tests,
            callbacks=callbacks,
            grade_id=request_id[:6] if request_id is not None else project.value,
            target=target,
            verbose=verbose,
        )
        result = autobadger()
        stdout = AutobadgerOutput(args.stdout)
        stdout(result)
    except Exception as e:
        print("FATAL Exception occurred while running Autobadger:")
        print(traceback.format_exc())
        raise e from None


if __name__ == "__main__":
    main()
